package b00394105_comp09044_cw2_final;

import java.util.LinkedList;
import javax.swing.JOptionPane;

public class PlaylistUI extends javax.swing.JFrame {
    UserList userList = UserListSingleton.getInstance().getUserList();
    MusicList musicList = MusicListSingleton.getInstance().getMusicList();

    /**
     * Creates new form PlaylistUI
     */
    public PlaylistUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        currentUserLbl = new javax.swing.JLabel();
        currentIDLbl = new javax.swing.JLabel();
        userNameLbl = new javax.swing.JLabel();
        userIDLbl = new javax.swing.JLabel();
        songsPanel = new javax.swing.JPanel();
        addSongBtn = new javax.swing.JButton();
        updateSongBtn = new javax.swing.JButton();
        deleteSongBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        songsTextArea = new javax.swing.JTextArea();
        displaySongsBtn = new javax.swing.JButton();
        displaySongByBtn = new javax.swing.JButton();
        displayByCB = new javax.swing.JComboBox<>();
        exitPanel = new javax.swing.JPanel();
        signOutBtn = new javax.swing.JButton();
        quitBtn = new javax.swing.JButton();
        deleteUserBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        headerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        titleLbl.setText("Music Library");

        currentUserLbl.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        currentUserLbl.setText("Current User: ");

        currentIDLbl.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        currentIDLbl.setText("ID: ");

        userNameLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userNameLbl.setText("[Username]");

        userIDLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        userIDLbl.setText("[User ID]");

        javax.swing.GroupLayout headerPanelLayout = new javax.swing.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addGap(146, 146, 146)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(headerPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentUserLbl)
                            .addComponent(currentIDLbl))
                        .addGap(68, 68, 68)
                        .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(userIDLbl)
                            .addComponent(userNameLbl)))
                    .addComponent(titleLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentUserLbl)
                    .addComponent(userNameLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(headerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentIDLbl)
                    .addComponent(userIDLbl))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        songsPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        addSongBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addSongBtn.setText("Add Song");
        addSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBtnActionPerformed(evt);
            }
        });

        updateSongBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        updateSongBtn.setText("Update Song");
        updateSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateSongBtnActionPerformed(evt);
            }
        });

        deleteSongBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteSongBtn.setText("Delete Song");
        deleteSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSongBtnActionPerformed(evt);
            }
        });

        songsTextArea.setColumns(20);
        songsTextArea.setRows(5);
        jScrollPane1.setViewportView(songsTextArea);

        displaySongsBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        displaySongsBtn.setText("Display All Songs");
        displaySongsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySongsBtnActionPerformed(evt);
            }
        });

        displaySongByBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        displaySongByBtn.setText("Display Songs By");
        displaySongByBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displaySongByBtnActionPerformed(evt);
            }
        });

        displayByCB.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        displayByCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "title", "artist", "genre", "release year" }));

        javax.swing.GroupLayout songsPanelLayout = new javax.swing.GroupLayout(songsPanel);
        songsPanel.setLayout(songsPanelLayout);
        songsPanelLayout.setHorizontalGroup(
            songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(songsPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(displaySongByBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(displayByCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(songsPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(addSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(updateSongBtn)
                        .addGap(18, 18, 18)
                        .addComponent(deleteSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(songsPanelLayout.createSequentialGroup()
                .addGap(134, 134, 134)
                .addComponent(displaySongsBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        songsPanelLayout.setVerticalGroup(
            songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(songsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateSongBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(songsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(songsPanelLayout.createSequentialGroup()
                        .addComponent(displaySongByBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayByCB, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(displaySongsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        exitPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        signOutBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        signOutBtn.setText("Sign Out");
        signOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signOutBtnActionPerformed(evt);
            }
        });

        quitBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        quitBtn.setText("Quit");
        quitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitBtnActionPerformed(evt);
            }
        });

        deleteUserBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteUserBtn.setText("Delete Account");
        deleteUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exitPanelLayout = new javax.swing.GroupLayout(exitPanel);
        exitPanel.setLayout(exitPanelLayout);
        exitPanelLayout.setHorizontalGroup(
            exitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitPanelLayout.createSequentialGroup()
                .addGap(87, 87, 87)
                .addComponent(signOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        exitPanelLayout.setVerticalGroup(
            exitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(exitPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(signOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(songsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exitPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(songsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signOutBtnActionPerformed
        LogInUI loginUI = new LogInUI();
        loginUI.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_signOutBtnActionPerformed

    private void quitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitBtnActionPerformed
        System.exit(0);
    }//GEN-LAST:event_quitBtnActionPerformed

    private void addSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBtnActionPerformed
        Integer songID = musicList.getCount();
        String userID = userIDLbl.getText();
        Integer listID = Integer.parseInt(userID);
        
        String title = JOptionPane.showInputDialog("Enter song name");
        String artist = JOptionPane.showInputDialog("Enter artist name");
        if(musicList.checkSongTitle(title, listID) == true && musicList.checkArtist(artist, listID) == true){
            JOptionPane.showMessageDialog(this, "This song by this artist is already in your list...");
        } else {
            String genre = JOptionPane.showInputDialog("Enter song genre");
            String inputYear = JOptionPane.showInputDialog("Enter song release year");
            Integer releaseYear = Integer.parseInt(inputYear);
            
            musicList.addSong(title, artist, genre, releaseYear, songID, listID);
            JOptionPane.showMessageDialog(this, "Song Added...");
        }
    }//GEN-LAST:event_addSongBtnActionPerformed

    private void deleteSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSongBtnActionPerformed
        String ID = userIDLbl.getText();
        Integer userID = Integer.parseInt(ID);
        
        String title = JOptionPane.showInputDialog("Enter song name");
        if(musicList.checkSongTitle(title, userID) == true){
            String artist = JOptionPane.showInputDialog("Enter artist name");
            if(musicList.checkArtist(artist, userID) == true){
                int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this song?");
                if(response == JOptionPane.YES_OPTION){
                    musicList.deleteSong(title, artist, userID);
                    JOptionPane.showMessageDialog(this, "Song Deleted...");
                } else if (response == JOptionPane.NO_OPTION){
                    JOptionPane.showMessageDialog(this, "Cancelling Deletion...");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No matching artist for that song...");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No song with that title...");
        }
    }//GEN-LAST:event_deleteSongBtnActionPerformed

    private void updateSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateSongBtnActionPerformed
        String ID = userIDLbl.getText();
        Integer userID = Integer.parseInt(ID);
        
        String title = JOptionPane.showInputDialog("Enter song name");
        if(musicList.checkSongTitle(title, userID) == true){
            String artist = JOptionPane.showInputDialog("Enter artist name");
            if(musicList.checkArtist(artist, userID) == true){
                title = JOptionPane.showInputDialog("Enter updated song name");
                artist = JOptionPane.showInputDialog("Enter updated artist name");
                String genre = JOptionPane.showInputDialog("Enter updated song genre");
                String inputYear = JOptionPane.showInputDialog("Enter updated song release year");
                Integer releaseYear = Integer.parseInt(inputYear);
                
                musicList.updateSong(title, artist, genre, releaseYear, userID);
                JOptionPane.showMessageDialog(this, "Song Updated...");
            } else {
                JOptionPane.showMessageDialog(this, "No matching artist for that song...");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No song with that title...");
        }
    }//GEN-LAST:event_updateSongBtnActionPerformed

    private void deleteUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserBtnActionPerformed
        String username = userNameLbl.getText();
        String ID = userIDLbl.getText();
        Integer userID = Integer.parseInt(ID);
        
        int response = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete your account?");
        if(response == JOptionPane.YES_OPTION){
            userList.deleteUser(username, userID);
            JOptionPane.showMessageDialog(this, "Account deleted...");
            LogInUI loginUI = new LogInUI();
            loginUI.setVisible(true);
            this.setVisible(false);
        } else if (response == JOptionPane.NO_OPTION){
            JOptionPane.showMessageDialog(this, "Account deletion cancelled...");
        }
    }//GEN-LAST:event_deleteUserBtnActionPerformed

    private void displaySongsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaySongsBtnActionPerformed
        String ID = userIDLbl.getText();
        Integer userID = Integer.parseInt(ID);
        
        LinkedList<Song> songsList = musicList.displaySongs(userID);
        
        String songsText = "";
        songsText = songsList.stream().map(song -> song.toString() + "\n").reduce(songsText, String::concat);
        songsTextArea.setText(songsText);
    }//GEN-LAST:event_displaySongsBtnActionPerformed

    private void displaySongByBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displaySongByBtnActionPerformed
        String ID = userIDLbl.getText();
        Integer userID = Integer.parseInt(ID);
        
        String userChoice = displayByCB.getSelectedItem().toString();
        String specification;
        LinkedList<Song> displayBySongs;
        
        if("title".equals(userChoice)){
            specification = JOptionPane.showInputDialog("Enter song name to display by");
            displayBySongs = musicList.displayByTitle(specification, userID);
            
            String songsText = "";
            songsText = displayBySongs.stream().map(song -> song.toString() + "\n").reduce(songsText, String::concat);
            songsTextArea.setText(songsText);
        } else if("artist".equals(userChoice)){
            specification = JOptionPane.showInputDialog("Enter artist name to display by");
            displayBySongs = musicList.displayByArtist(specification, userID);
            
            String songsText = "";
            songsText = displayBySongs.stream().map(song -> song.toString() + "\n").reduce(songsText, String::concat);
            songsTextArea.setText(songsText);
        } else if("genre".equals(userChoice)){
            specification = JOptionPane.showInputDialog("Enter genre to display by");
            displayBySongs = musicList.displayByGenre(specification, userID);
            
            String songsText = "";
            songsText = displayBySongs.stream().map(song -> song.toString() + "\n").reduce(songsText, String::concat);
            songsTextArea.setText(songsText);
        } else if("release year".equals(userChoice)){
            specification = JOptionPane.showInputDialog("Enter year of release to display by");
            Integer specifiedYear = Integer.parseInt(specification);
            displayBySongs = musicList.displayByYear(specifiedYear, userID);
            
            String songsText = "";
            songsText = displayBySongs.stream().map(song -> song.toString() + "\n").reduce(songsText, String::concat);
            songsTextArea.setText(songsText);
        }
    }//GEN-LAST:event_displaySongByBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlaylistUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlaylistUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlaylistUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlaylistUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlaylistUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSongBtn;
    private javax.swing.JLabel currentIDLbl;
    private javax.swing.JLabel currentUserLbl;
    private javax.swing.JButton deleteSongBtn;
    private javax.swing.JButton deleteUserBtn;
    private javax.swing.JComboBox<String> displayByCB;
    private javax.swing.JButton displaySongByBtn;
    private javax.swing.JButton displaySongsBtn;
    private javax.swing.JPanel exitPanel;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton quitBtn;
    private javax.swing.JButton signOutBtn;
    private javax.swing.JPanel songsPanel;
    private javax.swing.JTextArea songsTextArea;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JButton updateSongBtn;
    public javax.swing.JLabel userIDLbl;
    public javax.swing.JLabel userNameLbl;
    // End of variables declaration//GEN-END:variables
}
